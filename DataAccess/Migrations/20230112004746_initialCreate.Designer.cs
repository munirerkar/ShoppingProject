// <auto-generated />
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20230112004746_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "Asus",
                            IsDeleted = false
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Gigabyte",
                            IsDeleted = false
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "MSI",
                            IsDeleted = false
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Casper",
                            IsDeleted = false
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Monster",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Bilgisayar",
                            IsDeleted = false,
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Televizyon",
                            IsDeleted = false,
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Moda",
                            IsDeleted = false,
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Notebook",
                            IsDeleted = false,
                            ParentId = 1
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Uydu",
                            IsDeleted = false,
                            ParentId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("BarcodeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BarcodeNumber = "888888888888",
                            BrandId = 1,
                            CategoryId = 4,
                            IsDeleted = false,
                            ProductDescription = "Asus oyuncular için mükemmel bir laptop tasarladı",
                            ProductName = "Asus Oyuncu Laptop"
                        },
                        new
                        {
                            ProductId = 2,
                            BarcodeNumber = "89999999999",
                            BrandId = 2,
                            CategoryId = 4,
                            IsDeleted = false,
                            ProductDescription = "Gigabyte oyuncular için mükemmel bir laptop tasarladı",
                            ProductName = "Gigabyte Oyuncu Laptop"
                        },
                        new
                        {
                            ProductId = 3,
                            BarcodeNumber = "86999999999",
                            BrandId = 3,
                            CategoryId = 4,
                            IsDeleted = false,
                            ProductDescription = "MSI oyuncular için mükemmel bir laptop tasarladı",
                            ProductName = "MSI Oyuncu Laptop"
                        },
                        new
                        {
                            ProductId = 4,
                            BarcodeNumber = "87999999999",
                            BrandId = 4,
                            CategoryId = 4,
                            IsDeleted = false,
                            ProductDescription = "Casper oyuncular için mükemmel bir laptop tasarladı",
                            ProductName = "Casper Oyuncu Laptop"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
